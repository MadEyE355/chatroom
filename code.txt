chat.html
<html>
<head>
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Socket.IO chat</title>
    <style>
      body { margin: 0; padding-bottom: 3rem; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }
      #form { background: rgba(0, 0, 0, 0.15); padding: 0.25rem; position: fixed; bottom: 0; left: 0; right: 0; display: flex; height: 3rem; box-sizing: border-box; backdrop-filter: blur(10px); }
      #input { border: none; padding: 0 1rem; flex-grow: 1; border-radius: 2rem; margin: 0.25rem; }
      #input:focus { outline: none; }
      #form > button { background: #333; border: none; padding: 0 1rem; margin: 0.25rem; border-radius: 3px; outline: none; color: #fff; }
      #messages { list-style-type: none; margin: 0; padding: 0; }
      #messages > li { padding: 0.5rem 1rem; }
      #messages > li:nth-child(odd) { background: #efefef; }
    </style>
</head>
<body>
    <ul id="messages"></ul>
    <form id="form" action="">
      <input id="input" autocomplete="off" /><button>Send</button>
    </form>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();
      const form = document.getElementById('form');
      const input = document.getElementById('input');
      const messages = document.getElementById('messages');

      // Function to get query parameters
      function getQueryParameter(name) {
          const urlParams = new URLSearchParams(window.location.search);
          return urlParams.get(name);
      }

      const userName = getQueryParameter('name'); // Get the name from the query parameter

      form.addEventListener('submit', (e) => {
        e.preventDefault();
        if (input.value) {
          socket.emit('chat message', input.value);
          input.value = '';
        }
      });

      socket.on('chat message', (msg) => {
        const item = document.createElement('li');
        item.textContent = `${msg.name}: ${msg.message}`; // Display name and message
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      });

      // Emit the user name when connecting
      socket.emit('userName', userName);
    </script>
</body>
</html>


index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Name Input</title>
    <style>
        div {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
        }
        input {
            text-align: center;
            display: inline-block;
            position: relative;
        }
    </style>
</head>
<body>
    <div>
        <form id="nameForm">
            <input type="text" id="name" placeholder="Enter your name" name="name" required><br>
            <input type="submit" id="button" value="Submit">
        </form>
    </div>
    <script>
        const form = document.getElementById('nameForm');
        
        form.addEventListener('submit', (event) => {
            event.preventDefault(); // Prevent the default form submission
            
            const name = document.getElementById('name').value; // Get the name input value
            
            // Navigate to the chat page with the name as a query parameter
            window.location.href = `/chat?name=${encodeURIComponent(name)}`;
        });
    </script>
</body>
</html>



server.js
const express = require('express');
const fs = require('fs');
const path = require('path');
const { createServer } = require('node:http');
const { join } = require('node:path');
const { Server } = require('socket.io');
const app = express();
const server = createServer(app);
const io = new Server(server);
let userName 
let log = path.join(__dirname, 'log.txt');

app.get('/', (req, res) => {
    res.sendFile(join(__dirname, 'public', 'index.html'));
});

app.get('/chat', (req, res) => {
    res.sendFile(join(__dirname, 'public', 'chat.html'));
});

io.on('connection', (socket) => {
    console.log('a user connected');

    // fs.appendFile(log, `a user connected\n`, (err) => {});

    // Variable to store the user's name
    let userName;

    socket.on('userName', (name) => {
        userName = name; // Store the user's name
        console.log('User name received:', userName);
        fs.appendFile(log, `${userName} connected`, (err) => {});
    });

    socket.on('chat message', (msg) => {
        console.log('message: ' + msg);
        fs.appendFile(log, `${userName}: ${msg}\n`, (err) => {});
        
        // Emit the message with the user's name
        io.emit('chat message', { name: userName, message: msg });
    });
});

server.listen(3000, '0.0.0.0', () => {
    console.log('server running at http://localhost:3000');
});


package.json
{
  "name": "chatroom",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "express": "^4.21.0",
    "http": "^0.0.1-security",
    "nodemon": "^3.1.6",
    "socket.io": "^4.7.5",
    "ws": "^8.18.0"
  }
}


code aricture
 public
    -chat.html
    -index.html
 server.js
 log.txt
 package.json
 